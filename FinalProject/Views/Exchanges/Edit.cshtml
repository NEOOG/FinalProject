@model FinalProject.Models.Exchange

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutRightSideBar.cshtml";
    ViewBag.Title = Html.Settings().PageTitle ?? Html.Settings().ForumName;
    ViewBag.MetaDesc = Html.Settings().MetaDesc;
}
@section side
{
    @Html.Partial("_CommonSideNav")
}
<style>
    #exchangeBody{
        background-color:lightcyan;
    }
</style>

@*<h2>Edit</h2>*@
@if (User.Identity.IsAuthenticated)
{
    using (Html.BeginForm())
    {
    @Html.AntiForgeryToken()

        <body id="exchangeBody">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="thumbnail">
                        <div class="caption">
                            <h3 id="displayrow">Edit your entry here</h3>
                            <dl class="dl-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.NameType, htmlAttributes: new { @class = "control-label col-md-2" })

                                @Html.EditorFor(model => model.NameType, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NameType, "", new { @class = "text-danger" })




                                @Html.LabelFor(model => model.Info, htmlAttributes: new { @class = "control-label col-md-2" })

                                @Html.EditorFor(model => model.Info, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Info, "", new { @class = "text-danger" })




                                @Html.LabelFor(model => model.HaveNeed, htmlAttributes: new { @class = "control-label col-md-2" })

                                @Html.EnumDropDownListFor(model => model.HaveNeed, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.HaveNeed, "", new { @class = "text-danger" })



                                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })

                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })

                                <class type="submit" value="Create" class="btn btn-default" />


                                @Html.ActionLink("Cancel Edit", "Index")


                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </body>
    }
}

    @*<div class="form-horizontal">
        <h4>Exchange</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.NameType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Info, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Info, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Info, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HaveNeed, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.HaveNeed, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HaveNeed, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.PostTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PostTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExchangeUserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExchangeUserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExchangeUserName, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@


@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
